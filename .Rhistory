theme_minimal(base_size = 14) +
labs(
x = expression(C[i]~"(µmol mol"^{-1}*")"),
y = expression(W~"(µmol m"^{-2}~s^{-1}*")"),
color = NULL
) +
theme(
legend.position = "right"
)
g2
library(ggpubr)
ggarrange(g2, g1, ncol = 1, labels = c("a", "b"))
pars$K_C * (1 + 1e3 * envs$O / pars$K_O)
W_carbox = function(envs, pars) {
# Vc <- pars$V_cmax * envs$C_chl / (envs$C_chl + pars$K_C * (1 + 1e3 * envs$O / pars$K_O))
Vc <- pars$V_cmax * envs$C_chl / (envs$C_chl + pars$K_CO)
return(Vc)
}
W_regen <- function(envs, pars) {
J <- J_function(envs,pars)
Vr <- J * envs$C_chl / (4 * envs$C_chl + 8 * pars$gamma_star)
return(Vr)
}
W_tpu <- function(envs, pars) {
Vt <- 3 * pars$V_tpu * envs$C_chl / (envs$C_chl - pars$gamma_star)
return(Vt)
}
J_function = function(envs,pars) {
light_response = function(J, PPFD, J_max, phi_J, theta_J) {
# theta_J: convexity (curvature factor)
# phi_J: quantum efficiency
# PPFD: Photosynthetic Photon Flux Density (also known as PAR)
theta_J * J^2 - J * (J_max + phi_J * PPFD) + J_max * phi_J * PPFD
}
J_I = stats::uniroot(light_response,
c(0, pars$J_max), # lower and upper bounds
PPFD = envs$PPFD,
J_max = pars$J_max,
phi_J = pars$phi_J,
theta_J = pars$theta_J
)
return(J_I$root)
}
FvCB1980 = function(envs,pars) {
ret = list(
Wc = W_carbox(envs, pars),
Wj = W_regen(envs, pars),
Wp = W_tpu(envs, pars)
)
Wmin <- ifelse(
envs$C_chl > pars$gamma_star,
pmin(ret$Wc, ret$Wj, ret$Wp),
pmin(ret$Wc, ret$Wj)
)
ret$Wmin = Wmin
ret$An = (1- pars$gamma_star/envs$C_chl)*Wmin - pars$R_d
ret$Ac = (1- pars$gamma_star/envs$C_chl)*ret$Wc - pars$R_d
ret$Aj = (1- pars$gamma_star/envs$C_chl)*ret$Wj - pars$R_d
ret$Ap = (1- pars$gamma_star/envs$C_chl)*ret$Wp - pars$R_d
return(ret)
}
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
pars <- list(
R_d=2,
K_CO=700,
# K_C=268,
# K_O=165, #084,
gamma_star=38,
V_cmax=70,
J_max=130,
phi_J=0.33,
theta_J=0.825,
V_tpu=9
)
Anet=FvCB1980(envs,pars)
library(ggplot2)
library(tidyr)
library(dplyr)
df <- as.data.frame(Anet)
df$Ci <- envs$C_chl # add a time or observation index
df <- df[,5:9]
# Reshape to long format
df_long <- df %>%
pivot_longer(cols = -Ci, names_to = "Limitation", values_to = "Value")
df_long <- df_long %>%
mutate(Linetype = ifelse(Limitation == "An", "solid", "dashed"))
df_long$Limitation <- factor(df_long$Limitation, levels=c("Ac","Aj","Ap","An"))
# Plot
g1 <- ggplot(df_long, aes(x = Ci, y = Value, color = Limitation, linetype = Linetype)) +
geom_line(size = 1, alpha = 0.9) +
scale_linetype_identity() +  # Use values from the Linetype column directly
theme_minimal(base_size = 14) +
labs(
x = expression(C[i]~"(µmol mol"^{-1}*")"),
y = expression(A~"(µmol m"^{-2}~s^{-1}*")"),
color = NULL
) +
theme(
legend.position = "right"
)
df <- as.data.frame(Anet)
df$Ci <- envs$C_chl # add a time or observation index
df <- df[,c(1,2,3,4,9)]
# Reshape to long format
df_long <- df %>%
pivot_longer(cols = -Ci, names_to = "Limitation", values_to = "Value")
df_long <- df_long %>%
mutate(Linetype = ifelse(Limitation == "Wmin", "solid", "dashed"))
df_long$Limitation <- factor(df_long$Limitation, levels=c("Wc","Wj","Wp","Wmin"))
# Plot
g2 <- ggplot(df_long, aes(x = Ci, y = Value, color = Limitation, linetype = Linetype)) +
geom_line(size = 1, alpha = 0.9) +
scale_linetype_identity() +  # Use values from the Linetype column directly
theme_minimal(base_size = 14) +
labs(
x = expression(C[i]~"(µmol mol"^{-1}*")"),
y = expression(W~"(µmol m"^{-2}~s^{-1}*")"),
color = NULL
) +
theme(
legend.position = "right"
)
g2
library(ggpubr)
ggarrange(g2, g1, ncol = 1, labels = c("a", "b"))
ACi$A <- Anet$An
ACi <- list( A= Anet$An)
ACi <- list( A= Anet$An)
#### parameter estimation ####
# Fitness function
fitness <- function(x){
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
# K_C=268,
# K_O=165, #084,
phi_J=0.33,
theta_J=0.825,
)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
Ares=FvCB1980(envs,pars)
Anet<-Ares$An
# Calculate Fitness Value
fitness <- sqrt(mean((ACi$A - Anet)^2))
# print(fitness)
return(fitness)
}
nvar <- 6
nvar <- 6
lb <- seq(0.01, nvar)
ub <- c(300,500,20, 2000,20,100)
res <- psoptim(par = rep(NA,nvar), fn = fitness,
lower = lb, upper = ub,
control = list(maxit = 5000, s = 100, maxit.stagnate = 500))
library(pso)
res <- psoptim(par = rep(NA,nvar), fn = fitness,
lower = lb, upper = ub,
control = list(maxit = 5000, s = 100, maxit.stagnate = 500))
#### parameter estimation ####
# Fitness function
fitness <- function(x){
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
# K_C=268,
# K_O=165, #084,
phi_J=0.33,
theta_J=0.825,
)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
Ares <- FvCB1980(envs,pars)
Anet<-Ares$An
# Calculate Fitness Value
fitness <- sqrt(mean((ACi$A - Anet)^2))
# print(fitness)
return(fitness)
}
pars <- list(
R_d=2,
K_CO=700,
# K_C=268,
# K_O=165, #084,
gamma_star=38,
V_cmax=70,
J_max=130,
phi_J=0.33,
theta_J=0.825,
V_tpu=9
)
nvar <- 6
lb <- seq(0.01, nvar)
ub <- c(300,500,20, 2000,20,100)
res <- psoptim(par = rep(NA,nvar), fn = fitness,
lower = lb, upper = ub,
control = list(maxit = 5000, s = 100, maxit.stagnate = 500))
#### parameter estimation ####
# Fitness function
fitness <- function(x){
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
# K_C=268,
# K_O=165, #084,
phi_J=0.33,
theta_J=0.825,
)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
Ares <- FvCB1980(envs,pars)
Anet<-Ares$An
# Calculate Fitness Value
fitness <- sqrt(mean((ACi$A - Anet)^2))
# print(fitness)
return(fitness)
}
nvar <- 6
lb <- seq(0.01, nvar)
ub <- c(300,500,20, 2000,20,100)
res <- psoptim(par = rep(NA,nvar), fn = fitness,
lower = lb, upper = ub,
control = list(maxit = 5000, s = 100, maxit.stagnate = 500))
x=ub
fitness(x)
lenght(x)
length(x)
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
# K_C=268,
# K_O=165, #084,
phi_J=0.33,
theta_J=0.825,
)
x
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
phi_J=0.33,
theta_J=0.825,
)
x[1]
x[5]
x[6]
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
phi_J=0.33,
theta_J=0.825,
)
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
phi_J=0.33,
theta_J=0.825
)
#### parameter estimation ####
# Fitness function
fitness <- function(x){
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
phi_J=0.33,
theta_J=0.825
)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
Ares <- FvCB1980(envs,pars)
Anet<-Ares$An
# Calculate Fitness Value
fitness <- sqrt(mean((ACi$A - Anet)^2))
# print(fitness)
return(fitness)
}
fitness(x)
#### parameter estimation ####
# Fitness function
fitness <- function(x){
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
phi_J=0.33,
theta_J=0.825
)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
Ares <- FvCB1980(envs,pars)
Anet<-Ares$An
# Calculate Fitness Value
fitness <- sqrt(mean((ACi$A - Anet)^2))
# print(fitness)
return(fitness)
}
nvar <- 6
lb <- seq(0.01, nvar)
ub <- c(300,500,20, 2000,20,100)
library(pso)
res <- psoptim(par = rep(NA,nvar), fn = fitness,
lower = lb, upper = ub,
control = list(maxit = 5000, s = 100, maxit.stagnate = 500))
res
#### parameter estimation ####
# Fitness function
objfunc <- function(x){
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
phi_J=0.33,
theta_J=0.825
)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
Ares <- FvCB1980(envs,pars)
Anet<-Ares$An
# Calculate Fitness Value
fitness <- sqrt(mean((ACi$A - Anet)^2))
# print(fitness)
return(fitness)
}
#### parameter estimation ####
# Fitness function
objfunc <- function(x){
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
phi_J=0.33,
theta_J=0.825
)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
Ares <- FvCB1980(envs,pars)
Anet<-Ares$An
# Calculate Fitness Value
fitness <- sqrt(mean((ACi$A - Anet)^2))
# print(fitness)
return(fitness)
}
objfunc(res$par)
true.val-res$par
true.val <- c(70, 130,9,700,2,38)
true.val-res$par
true.val
res$par
calc_Anet <- function(x){
pars <- list(
V_cmax=x[1],
J_max=x[2],
V_tpu=x[3],
K_CO=x[4],
R_d=x[5],
gamma_star=x[6],
phi_J=0.33,
theta_J=0.825
)
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800,
O=0.21)
Ares <- FvCB1980(envs,pars)
Anet<-Ares$An
return(Anet)
}
true.Anet=calc_Anet(true.val)
sim.Anet=calc_Anet(res$par)
Ci_vals   <- envs$C_chl
# Combine into a tidy data frame
df <- data.frame(
Ci = Ci_vals,
True = true.Anet,
Sim  = sim.Anet
) %>%
pivot_longer(cols = c("True", "Sim"), names_to = "Type", values_to = "Anet")
# Plot
ggplot(df, aes(x = Ci, y = Anet, color = Type, linetype = Type)) +
geom_line(size = 1) +
scale_linetype_manual(values = c("True" = "dashed", "Sim" = "dashed")) +
scale_color_manual(values = c("True" = "blue", "Sim" = "red")) +
labs(
x = expression(C[i]~"(µmol mol"^{-1}*")"),
y = expression(A[n]~"(µmol m"^{-2}~s^{-1}*")"),
color = "Curve", linetype = "Curve"
) +
theme_minimal(base_size = 14)
path0 <- "C:/Users/Rudan/Documents/GitHub/FvCBestimation"
setwd(path0)
setwd(path0)
for (file in c("models/")){
filen<-paste0(path0,"R/",file)
myls <- list.files(path=filen,pattern="*.R")
myls<-paste0(filen,myls)
invisible(sapply(myls,FUN=source))
}
path0 <- "C:/Users/Rudan/Documents/GitHub/FvCBestimation/code"
setwd(path0)
for (file in c("models/")){
filen<-paste0(path0,"R/",file)
myls <- list.files(path=filen,pattern="*.R")
myls<-paste0(filen,myls)
invisible(sapply(myls,FUN=source))
}
path0 <- "C:/Users/Rudan/Documents/GitHub/FvCBestimation"
setwd(path0)
for (file in c("models/")){
filen<-paste0(path0,"code/",file)
myls <- list.files(path=filen,pattern="*.R")
myls<-paste0(filen,myls)
invisible(sapply(myls,FUN=source))
}
path0 <- "C:/Users/Rudan/Documents/GitHub/FvCBestimation/"
setwd(path0)
for (file in c("models/")){
filen<-paste0(path0,"code/",file)
myls <- list.files(path=filen,pattern="*.R")
myls<-paste0(filen,myls)
invisible(sapply(myls,FUN=source))
}
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggpubr)
source("FvCB1980.R")
source("~/GitHub/FvCBestimation/code/parameterization/simulation_FvCB1980.R", echo=TRUE)
library(usethis)
library(devtools)
Rd2pdf(path = ".", output = "my_package_manual.pdf")
tinytex::install_tinytex()
tinytex::install_tinytex()
Rd2pdf(path = ".", output = "my_package_manual.pdf")
help("FvCB1980")
path0 <- "C:/Users/Rudan/Documents/GitHub/FvCBestimation/"
envs <- list(
C_chl=c(20,50,100,150,200,300,400,500,600,700,800,900,1000, 1200),
PPFD=1800) # ,  O=0.21)
pars <- list(
R_d=2,
K_CO=700,
# K_C=268,
# K_O=165, #084,
gamma_star=38,
V_cmax=70,
J_max=130,
phi_J=0.33,
theta_J=0.825,
V_tpu=9
)
Anet=FvCB(envs,pars)
